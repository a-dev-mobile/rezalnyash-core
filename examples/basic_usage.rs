use rayon::vec;
use rezalnyas_core::{
    enums::{
        cut_orientation_preference::CutOrientationPreference,
        optimization_priority::OptimizationPriority,
    },
    log_debug, log_error, log_info, log_warn,
    logging::{init_logging, LogConfig, LogLevel},
    models::{
        calculation_request::CalculationRequest, configuration::structs::Configuration,
        panel::structs::Panel, performance_thresholds::PerformanceThresholds,
        tile_dimensions::TileDimensions,
    },
    scaled_math::{PrecisionAnalyzer, ScaledConverter, ScaledNumber},
    CutListOptimizerService, CuttingRequest, Material, OptimizationConfig, OptimizationStrategy,
};
const MAX_ALLOWED_DIGITS: u8 = 6;
fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üêõ DEBUG MODE: Single-threaded optimization");
    println!(
        "üíª Available cores: {}",
        std::thread::available_parallelism()
            .map(|n| n.get())
            .unwrap_or(1)
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_logging(LogConfig {
        level: LogLevel::Debug,
    });

    // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    log_info!("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
    log_debug!("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
    log_warn!("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ");
    log_error!("–û—à–∏–±–∫–∞");

    let panels: Vec<Panel> = vec![
        Panel::new(1, "55.123".to_string(), "45.0".to_string(), 1),
        Panel::new(2, "35.12".to_string(), "25.0".to_string(), 1),
        Panel::new(3, "25.1".to_string(), "15.0".to_string(), 1),
        Panel::new(4, "15.000".to_string(), "20.0".to_string(), 1),
        Panel::new(5, "40.0".to_string(), "30.0".to_string(), 1),
    ];
    let stock_panels: Vec<Panel> = vec![Panel::new(1, "90.0255".to_string(), "120.01".to_string(), 1)];

    let config = Configuration {
        cut_thickness: 0.0,           // –¢–æ—á–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞
        use_single_stock_unit: false, // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã
        optimization_factor: 2,
        // in java = 0
        optimization_priority: vec![
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            OptimizationPriority::MostTiles,
            OptimizationPriority::LeastWastedArea,
            OptimizationPriority::LeastNbrCuts,
            OptimizationPriority::LeastNbrMosaics,
            OptimizationPriority::BiggestUnusedTileArea,
            OptimizationPriority::MostHvDiscrepancy,
        ],
        cut_orientation_preference: CutOrientationPreference::Both, // –í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–æ–≤

        consider_orientation: false, // –£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–æ–ª–æ–∫–æ–Ω
        min_trim_dimension: 0.0, //  —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–ª–µ–∑–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Å—Ç–∞—Ç–∫–∞ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –≤ —Ç–µ—Ö –∂–µ –µ–¥–∏–Ω–∏—Ü–∞—Ö, —á—Ç–æ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–º–º, —Å–º, –¥—é–π–º—ã –∏ —Ç.–¥.).
        performance_thresholds: PerformanceThresholds {
            max_simultaneous_tasks: 1,   // –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤
            max_simultaneous_threads: 1, // –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É
            thread_check_interval: 100,
        },
    };
    let request = CalculationRequest {
        configuration: config,
        panels,
        stock_panels,
    };

    // submitTask –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
    // compute
    let panels = &request.panels;
    let stock_panels = &request.stock_panels;
    let configuration = &request.configuration;

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    let max_decimal_places_panels = Panel::get_max_decimal_places(panels);
    let max_decimal_places_stock = Panel::get_max_decimal_places(stock_panels);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã —Ä–µ–∑–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–µ–∑–∫–∏
    let cut_thickness_precision =
        PrecisionAnalyzer::count_decimal_places(&configuration.cut_thickness.to_string());
    let min_trim_precision =
        PrecisionAnalyzer::count_decimal_places(&configuration.min_trim_dimension.to_string());

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏

    let max_decimal_places = [
        max_decimal_places_panels,
        max_decimal_places_stock,
        cut_thickness_precision,
        min_trim_precision,
    ]
    .iter()
    .max()
    .copied()
    .unwrap_or(0);

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –¥–æ –∑–∞–ø—è—Ç–æ–π
    let max_integer_places_panels = Panel::get_max_integer_places(panels);
    let max_integer_places_stock = Panel::get_max_integer_places(stock_panels);

    let cut_thickness_integer =
        PrecisionAnalyzer::count_integer_places(&configuration.cut_thickness.to_string());
    let min_trim_integer =
        PrecisionAnalyzer::count_integer_places(&configuration.min_trim_dimension.to_string());

    let max_integer_places = [
        max_integer_places_panels,
        max_integer_places_stock,
        cut_thickness_integer,
        min_trim_integer,
    ]
    .iter()
    .max()
    .copied()
    .unwrap_or(0);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä
    // iMax2 - final_precision
    let final_precision = if max_decimal_places + max_integer_places > MAX_ALLOWED_DIGITS {
        log_warn!(
            "Maximum allowed digits exceeded: maxDecimalPlaces[{}] maxIntegerPlaces[{}] maxAllowedDigits[{}]",
            max_decimal_places, max_integer_places, MAX_ALLOWED_DIGITS
        );
        MAX_ALLOWED_DIGITS.saturating_sub(max_integer_places).max(0)
    } else {
        max_decimal_places
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    let converter = ScaledConverter::new(final_precision)?;
    // dPow - scale_factor
    let scale_factor = 10_i64.pow(final_precision as u32);
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    let mut tiles = Vec::new();
    let mut stock_tiles = Vec::new();
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–µ–ª–µ–π (tiles)
    for panel in panels {
        for _ in 0..panel.count {
            let width_scaled = ScaledNumber::from_str(&panel.width, final_precision)?;
            let height_scaled = ScaledNumber::from_str(&panel.height, final_precision)?;

            let tile = TileDimensions {
                id: panel.id,
                width: width_scaled.raw_value() as u32,
                height: height_scaled.raw_value() as u32,
                orientation: panel.orientation,
                is_rotated: false,
            };

            tiles.push(tile);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π (stock tiles)
    for stock_panel in stock_panels {
        for _ in 0..stock_panel.count {
            let width_scaled = ScaledNumber::from_str(&stock_panel.width, final_precision)?;
            let height_scaled = ScaledNumber::from_str(&stock_panel.height, final_precision)?;

            let stock_tile = TileDimensions {
                id: stock_panel.id,
                width: width_scaled.raw_value() as u32,
                height: height_scaled.raw_value() as u32,

                orientation: stock_panel.orientation,
                is_rotated: false,
            };

            stock_tiles.push(stock_tile);
        }
    }

    Ok(())
}
