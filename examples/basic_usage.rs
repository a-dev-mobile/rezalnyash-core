//! examples/simple_usage.rs
//! –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å —Ç—è–∂–µ–ª—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏

use rezalnyas_core::{Material, CuttingRequest, CuttingOptimizer, OptimizationStrategy};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("=== –¢—è–∂–µ–ª—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ ===\n");

    // –°–æ–∑–¥–∞–µ–º –ú–ù–û–ì–û –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    println!("üîß –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...");
    let material = Material::with_cost(2500.0, 4000.0, 0.08)?;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    let mut requests = Vec::new();
    
    // –ö—Ä—É–ø–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Å—Ç–æ–ª–µ—à–Ω–∏—Ü—ã, —Ñ–∞—Å–∞–¥—ã)
    for i in 1..=15 {
        requests.push(CuttingRequest::new(
            400.0 + i as f64 * 20.0,  // –æ—Ç 420 –¥–æ 720
            600.0 + i as f64 * 15.0,  // –æ—Ç 615 –¥–æ 825
            3 + (i % 4),              // –æ—Ç 3 –¥–æ 6 —à—Ç—É–∫
        ));
    }
    
    // –°—Ä–µ–¥–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–±–æ–∫–æ–≤–∏–Ω—ã, –ø–æ–ª–∫–∏)
    for i in 1..=25 {
        requests.push(CuttingRequest::new(
            200.0 + i as f64 * 10.0,  // –æ—Ç 210 –¥–æ 460
            300.0 + i as f64 * 8.0,   // –æ—Ç 308 –¥–æ 508
            2 + (i % 5),              // –æ—Ç 2 –¥–æ 6 —à—Ç—É–∫
        ));
    }
    
    // –ú–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (—è—â–∏–∫–∏, –¥–≤–µ—Ä—Ü—ã)
    for i in 1..=30 {
        requests.push(CuttingRequest::new(
            100.0 + i as f64 * 5.0,   // –æ—Ç 105 –¥–æ 250
            150.0 + i as f64 * 4.0,   // –æ—Ç 154 –¥–æ 270
            4 + (i % 6),              // –æ—Ç 4 –¥–æ 9 —à—Ç—É–∫
        ));
    }

    let total_parts: usize = requests.iter().map(|r| r.quantity).sum();
    let total_area: f64 = requests.iter().map(|r| r.total_area()).sum();
    
    println!("üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:");
    println!("   ‚Ä¢ {} —Ç–∏–ø–æ–≤ –¥–µ—Ç–∞–ª–µ–π", requests.len());
    println!("   ‚Ä¢ {} –¥–µ—Ç–∞–ª–µ–π –≤—Å–µ–≥–æ", total_parts);
    println!("   ‚Ä¢ {:.1} –º¬≤ –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –¥–µ—Ç–∞–ª–µ–π", total_area / 1_000_000.0);
    println!("   ‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: {}x{} –º–º ({:.1} –º¬≤)", 
             material.width, material.height, material.area() / 1_000_000.0);
    println!("   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ {} –ª–∏—Å—Ç–æ–≤ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω—É–∂–Ω–æ\n", 
             (total_area / material.area()).ceil() as usize);

    let optimizer = CuttingOptimizer::new();

    // –ü—Ä–∏–º–µ—Ä 1: –ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    println!("üêå 1. –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (1 –ø–æ—Ç–æ–∫):");
    let start = std::time::Instant::now();
    let result = optimizer.optimize_sequential(&material, &requests)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è: {:.3} —Å–µ–∫", duration.as_secs_f64());
    println!("   üìÑ –õ–∏—Å—Ç–æ–≤: {}", result.layouts.len());
    println!("   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", result.total_utilization * 100.0);
    println!("   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {:.2} —Ä—É–±", result.total_cost.unwrap_or(0.0));
    println!("   üóëÔ∏è  –û—Ç—Ö–æ–¥—ã: {:.1} –º¬≤", result.total_waste_area / 1_000_000.0);
    if result.unplaced_parts > 0 {
        println!("   ‚ö†Ô∏è  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {} –¥–µ—Ç–∞–ª–µ–π", result.unplaced_parts);
    }

    // –ü—Ä–∏–º–µ—Ä 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–ó–î–ï–°–¨ –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ë–´–°–¢–†–ï–ï!)
    println!("\nüöÄ 2. –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–≤—Å–µ —è–¥—Ä–∞):");
    let start = std::time::Instant::now();
    let result = optimizer.optimize_parallel(&material, &requests)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è: {:.3} —Å–µ–∫", duration.as_secs_f64());
    println!("   üìÑ –õ–∏—Å—Ç–æ–≤: {}", result.layouts.len());
    println!("   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", result.total_utilization * 100.0);
    println!("   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {:.2} —Ä—É–±", result.total_cost.unwrap_or(0.0));
    println!("   üóëÔ∏è  –û—Ç—Ö–æ–¥—ã: {:.1} –º¬≤", result.total_waste_area / 1_000_000.0);
    if result.unplaced_parts > 0 {
        println!("   ‚ö†Ô∏è  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {} –¥–µ—Ç–∞–ª–µ–π", result.unplaced_parts);
    }

    // –ü—Ä–∏–º–µ—Ä 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–ª—è –û–ß–ï–ù–¨ –±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞—á)
    println!("\nüì¶ 3. –ü–ê–ö–ï–¢–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã):");
    let start = std::time::Instant::now();
    let result = optimizer.optimize_batch(&material, &requests)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è: {:.3} —Å–µ–∫", duration.as_secs_f64());
    println!("   üìÑ –õ–∏—Å—Ç–æ–≤: {}", result.layouts.len());
    println!("   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", result.total_utilization * 100.0);
    println!("   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {:.2} —Ä—É–±", result.total_cost.unwrap_or(0.0));
    if result.unplaced_parts > 0 {
        println!("   ‚ö†Ô∏è  –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {} –¥–µ—Ç–∞–ª–µ–π", result.unplaced_parts);
    }

    // –ü—Ä–∏–º–µ—Ä 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    println!("\nü§ñ 4. –ê–í–¢–û-–≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–µ—à–∞–µ—Ç —Å–∞–º–∞):");
    let start = std::time::Instant::now();
    let result = optimizer.optimize_with_strategy(&material, &requests, OptimizationStrategy::Auto)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è: {:.3} —Å–µ–∫", duration.as_secs_f64());
    println!("   üìÑ –õ–∏—Å—Ç–æ–≤: {}", result.layouts.len());
    println!("   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", result.total_utilization * 100.0);
    println!("   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {:.2} —Ä—É–±", result.total_cost.unwrap_or(0.0));

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–ì–†–£–ó–ö–ê: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    println!("\nüî• –ë–ï–ù–ß–ú–ê–†–ö: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (5 –ø—Ä–æ–≥–æ–Ω–æ–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏):");
    
    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è - 5 —Ä–∞–∑
    println!("\nüêå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:");
    let mut seq_times = Vec::new();
    for i in 1..=5 {
        print!("   –ü—Ä–æ–≥–æ–Ω {}/5... ", i);
        let start = std::time::Instant::now();
        let _result = optimizer.optimize_sequential(&material, &requests)?;
        let duration = start.elapsed();
        seq_times.push(duration.as_secs_f64());
        println!("{:.3}—Å", duration.as_secs_f64());
    }
    let avg_seq = seq_times.iter().sum::<f64>() / seq_times.len() as f64;
    println!("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.3}—Å", avg_seq);
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è - 5 —Ä–∞–∑  
    println!("\nüöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:");
    let mut par_times = Vec::new();
    for i in 1..=5 {
        print!("   –ü—Ä–æ–≥–æ–Ω {}/5... ", i);
        let start = std::time::Instant::now();
        let _result = optimizer.optimize_parallel(&material, &requests)?;
        let duration = start.elapsed();
        par_times.push(duration.as_secs_f64());
        println!("{:.3}—Å", duration.as_secs_f64());
    }
    let avg_par = par_times.iter().sum::<f64>() / par_times.len() as f64;
    println!("   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.3}—Å", avg_par);
    
    // –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    println!("\nüèÜ –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:");
    println!("   üêå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è: {:.3}—Å (—Å—Ä–µ–¥–Ω–µ–µ)", avg_seq);
    println!("   üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è:     {:.3}—Å (—Å—Ä–µ–¥–Ω–µ–µ)", avg_par);
    
    if avg_par < avg_seq {
        let speedup = avg_seq / avg_par;
        println!("   ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {:.2}x –±—ã—Å—Ç—Ä–µ–µ!", speedup);
        if speedup > 1.5 {
            println!("   üî• –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏!");
        }
    } else {
        println!("   ‚ö†Ô∏è –î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ –¥–∞–ª–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è");
        println!("      (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–∞—è –∏–ª–∏ –º–∞–ª–æ —è–¥–µ—Ä)");
    }
    
    println!("   üíª –î–æ—Å—Ç—É–ø–Ω–æ —è–¥–µ—Ä: {}", std::thread::available_parallelism().map(|n| n.get()).unwrap_or(1));

    // –ü—Ä–∏–º–µ—Ä 5: –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è!)
    println!("\n‚ö° 5. –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –æ—Ü–µ–Ω–∫–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏):");
    let start = std::time::Instant::now();
    let estimate = optimizer.estimate_quick(&material, &requests)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è: {:.6} —Å–µ–∫ (–º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ!)", duration.as_secs_f64());
    println!("   üìÑ –ü—Ä–∏–º–µ—Ä–Ω–æ –ª–∏—Å—Ç–æ–≤: {}", estimate.estimated_sheets);
    println!("   ‚ö° –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", estimate.estimated_efficiency * 100.0);
    println!("   üéØ –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏: {:.1}%", estimate.confidence * 100.0);
    println!("   üí° –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π!");

    // –ü—Ä–∏–º–µ—Ä 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    println!("\n‚öîÔ∏è  6. –ë–ò–¢–í–ê –ê–õ–ì–û–†–ò–¢–ú–û–í:");
    let start = std::time::Instant::now();
    let comparisons = optimizer.compare_algorithms(&material, &requests)?;
    let duration = start.elapsed();
    
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {:.3} —Å–µ–∫", duration.as_secs_f64());
    println!("   ü•ä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è:");
    
    for (i, comparison) in comparisons.iter().enumerate() {
        let trophy = match i {
            0 => "ü•á",
            1 => "ü•à", 
            _ => "ü•â"
        };
        println!("   {} {}: {:.3}—Å, {:.1}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, {} –ª–∏—Å—Ç–æ–≤", 
                 trophy,
                 comparison.algorithm_name, 
                 comparison.execution_time_ms as f64 / 1000.0,
                 comparison.utilization * 100.0,
                 comparison.sheets_used);
    }

    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    println!("\nüî•üî•üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –£–¥–≤–∞–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å! üî•üî•üî•");
    
    // –£–¥–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏
    let extreme_requests: Vec<_> = requests.iter().map(|r| {
        CuttingRequest::new(r.width, r.height, r.quantity * 50)
    }).collect();
    
    let extreme_total: usize = extreme_requests.iter().map(|r| r.quantity).sum();
    println!("   üìä –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {} –¥–µ—Ç–∞–ª–µ–π!", extreme_total);
    
    println!("\n   üêå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:");
    let start = std::time::Instant::now();
    let seq_result = optimizer.optimize_sequential(&material, &extreme_requests)?;
    let seq_time = start.elapsed();
    println!("      ‚è±Ô∏è  {:.3}—Å, {} –ª–∏—Å—Ç–æ–≤, {:.1}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
             seq_time.as_secs_f64(), seq_result.layouts.len(), seq_result.total_utilization * 100.0);
    
    println!("   üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:");
    let start = std::time::Instant::now();
    let par_result = optimizer.optimize_parallel(&material, &extreme_requests)?;
    let par_time = start.elapsed();
    println!("      ‚è±Ô∏è  {:.3}—Å, {} –ª–∏—Å—Ç–æ–≤, {:.1}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
             par_time.as_secs_f64(), par_result.layouts.len(), par_result.total_utilization * 100.0);
    
    if par_time < seq_time {
        let extreme_speedup = seq_time.as_secs_f64() / par_time.as_secs_f64();
        println!("\n   üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï –ù–ê –°–õ–û–ñ–ù–û–ô –ó–ê–î–ê–ß–ï: {:.2}x!", extreme_speedup);
        
        if extreme_speedup > 2.0 {
            println!("   üöÄüöÄüöÄ –ù–ï–í–ï–†–û–Ø–¢–ù–û! –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —Ä—É–ª–∏—Ç! üöÄüöÄüöÄ");
        } else if extreme_speedup > 1.3 {
            println!("   ‚úÖ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ‚úÖ");
        } else {
            println!("   ‚úÖ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏–µ!");
        }
    } else {
        println!("   ü§î –ù–∞ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ");
    }

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_all_strategies_heavy_load() {
        // –°–æ–∑–¥–∞–µ–º —Ç—è–∂–µ–ª—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        let material = Material::new(2000.0, 3000.0).unwrap();
        let mut requests = Vec::new();
        
        // –ú–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        for i in 1..=20 {
            requests.push(CuttingRequest::new(
                100.0 + i as f64 * 10.0,
                150.0 + i as f64 * 8.0,
                3 + (i % 4),
            ));
        }
        
        let optimizer = CuttingOptimizer::new();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ —Ç—è–∂–µ–ª–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        let seq_start = std::time::Instant::now();
        assert!(optimizer.optimize_sequential(&material, &requests).is_ok());
        let seq_time = seq_start.elapsed();
        
        let par_start = std::time::Instant::now();
        assert!(optimizer.optimize_parallel(&material, &requests).is_ok());
        let par_time = par_start.elapsed();
        
        let batch_start = std::time::Instant::now();
        assert!(optimizer.optimize_batch(&material, &requests).is_ok());
        let batch_time = batch_start.elapsed();
        
        let auto_start = std::time::Instant::now();
        assert!(optimizer.optimize_with_strategy(&material, &requests, OptimizationStrategy::Auto).is_ok());
        let auto_time = auto_start.elapsed();
        
        // –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        println!("–í—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö:");
        println!("  Sequential: {:.3}s", seq_time.as_secs_f64());
        println!("  Parallel:   {:.3}s", par_time.as_secs_f64());
        println!("  Batch:      {:.3}s", batch_time.as_secs_f64());
        println!("  Auto:       {:.3}s", auto_time.as_secs_f64());
    }

    #[test]
    fn test_estimate_and_comparison_performance() {
        let material = Material::new(2000.0, 2000.0).unwrap();
        let mut requests = Vec::new();
        
        // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
        for i in 1..=15 {
            requests.push(CuttingRequest::new(
                200.0 + i as f64 * 15.0,
                300.0 + i as f64 * 10.0,
                2 + (i % 3),
            ));
        }
        
        let optimizer = CuttingOptimizer::new();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ—Ç—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        let estimate_start = std::time::Instant::now();
        assert!(optimizer.estimate_quick(&material, &requests).is_ok());
        let estimate_time = estimate_start.elapsed();
        
        let compare_start = std::time::Instant::now();
        assert!(optimizer.compare_algorithms(&material, &requests).is_ok());
        let compare_time = compare_start.elapsed();
        
        println!("–í—Ä–µ–º–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
        println!("  Quick estimate: {:.6}s", estimate_time.as_secs_f64());
        println!("  Compare algos:  {:.3}s", compare_time.as_secs_f64());
        
        // –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–π
        assert!(estimate_time.as_millis() < 100, "Estimate should be under 100ms");
    }

    #[test]
    fn test_extreme_load() {
        // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è
        if std::env::var("RUN_EXTREME_TESTS").is_ok() {
            let material = Material::new(3000.0, 4000.0).unwrap();
            let mut requests = Vec::new();
            
            // –û—á–µ–Ω—å –º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π
            for i in 1..=50 {
                requests.push(CuttingRequest::new(
                    50.0 + i as f64 * 8.0,
                    100.0 + i as f64 * 6.0,
                    2 + (i % 7),
                ));
            }
            
            let optimizer = CuttingOptimizer::new();
            
            println!("üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: {} —Ç–∏–ø–æ–≤ –¥–µ—Ç–∞–ª–µ–π", requests.len());
            let total_parts: usize = requests.iter().map(|r| r.quantity).sum();
            println!("üî• –í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π: {}", total_parts);
            
            // –¢–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            let start = std::time::Instant::now();
            let result = optimizer.optimize_parallel(&material, &requests).unwrap();
            let duration = start.elapsed();
            
            println!("üî• –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {:.3}s", duration.as_secs_f64());
            println!("üî• –õ–∏—Å—Ç–æ–≤ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å: {}", result.layouts.len());
            println!("üî• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", result.total_utilization * 100.0);
            
            assert!(!result.layouts.is_empty());
        }
    }
}